{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wkariuki/Development/code/phase-2/Bank-of-Flatiron /Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\n// // import React, { useState, useEffect } from \"react\";\n// // import TransactionsList from \"./TransactionsList\";\n// // import Search from \"./Search\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n// // function AccountContainer() {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [searchTerm, setSearchTerm] = useState(\"\");\n// //   useEffect(() => {\n// //     fetch('http://localhost:8001/transactions')\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error('Failed to fetch transactions');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactions(data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error fetching transactions:\", error);\n// //         alert(\"Failed to fetch transactions.\");\n// //       });\n// //   }, []);\n// //   const filteredTransactions = transactions.filter((transaction) =>\n// //     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n// //   );\n// //   const addTransaction = (newTransaction) => {\n// //     setTransactions([...transactions, newTransaction]);\n// //   };\n// //   return (\n// //     <div>\n// //       <Search setSearchTerm={setSearchTerm} />\n// //       <AddTransactionForm addTransaction={addTransaction} />\n// //       <TransactionsList transactions={filteredTransactions} />\n// //     </div>\n// //   );\n// // }\n// // export default AccountContainer;\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  _s();\n\n  const [transaction, setTransaction] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:8001/transactions?q=\" + query).then(resp => resp.json()).then(transaction => setTransaction(transaction));\n  }, [query]);\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n  }\n\n  const handleDelete = id => {\n    const updatedTransactions = transactions.filter(transaction => transaction.id !== id);\n    setTransactions(updatedTransactions);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      handleSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: transaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: transaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountContainer, \"TGHL9Tu/fBV0orC7qrZLUvQWd6Q=\");\n\n_c = AccountContainer;\nexport default AccountContainer; // import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function AccountContainer() {\n//   const [transactions, setTransactions] = useState([]);\n//   // const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [sortedBy, setSortedBy] = useState(null); // Track the currently sorted column\n//   const [sortedAscending, setSortedAscending] = useState(true); // Track sorting order\n//   useEffect(() => {\n//     fetch('http://localhost:8001/transactions')\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch transactions');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactions(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching transactions:\", error);\n//         alert(\"Failed to fetch transactions.\");\n//       });\n//   }, []);\n//   const filteredTransactions = transactions.filter((transaction) =>\n//     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n//   const addTransaction = (newTransaction) => {\n//     setTransactions([...transactions, newTransaction]);\n//   };\n//   // Function to handle sorting\n//   const handleSort = (sortBy) => {\n//     if (sortedBy === sortBy) {\n//       setSortedAscending(!sortedAscending); // Toggle sorting order if already sorted by the selected column\n//     } else {\n//       setSortedBy(sortBy); // Set the new sorting column\n//       setSortedAscending(true); // Default to ascending order for the new column\n//     }\n//   };\n//   // Function to handle deletion\n//   const handleDelete = (id) => {\n//     // Remove the transaction from the array\n//     const updatedTransactions = transactions.filter((transaction) => transaction.id !== id);\n//     setTransactions(updatedTransactions);\n//     // Perform deletion on the backend\n//     fetch(`http://localhost:8001/transactions/${id}`, {\n//       method: 'DELETE',\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete transaction');\n//         }\n//         alert('Transaction deleted successfully.');\n//       })\n//       .catch((error) => {\n//         console.error(\"Error deleting transaction:\", error);\n//         alert(\"Failed to delete transaction.\");\n//         // Rollback changes if deletion on the backend fails\n//         setTransactions(filteredTransactions);\n//       });\n//   };\n//   return (\n//     <div>\n//       <Search/>\n//       <AddTransactionForm addTransaction={addTransaction} />\n//       <TransactionsList\n//         transactions={filteredTransactions}\n//         onSort={handleSort}\n//         onDelete={handleDelete}\n//         sortedBy={sortedBy}\n//         sortedAscending={sortedAscending}\n//       />\n//     </div>\n//   );\n// }\n// export default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/wkariuki/Development/code/phase-2/Bank-of-Flatiron /Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js"],"names":["React","useEffect","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","transaction","setTransaction","query","setQuery","fetch","then","resp","json","handleSearch","e","target","value","handleDelete","id","updatedTransactions","transactions","filter","setTransactions"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,KAAK,CAAC,0CAA0CF,KAA3C,CAAL,CACGG,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAEQL,WAAW,IAAIC,cAAc,CAACD,WAAD,CAFrC;AAGD,GAJQ,EAIN,CAACE,KAAD,CAJM,CAAT;;AAKA,WAASM,YAAT,CAAsBC,CAAtB,EAAyB;AACvBN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD;;AACD,QAAMC,YAAY,GAAIC,EAAD,IAAQ;AACvB,UAAMC,mBAAmB,GAAGC,YAAY,CAACC,MAAb,CAAqBhB,WAAD,IAAiBA,WAAW,CAACa,EAAZ,KAAmBA,EAAxD,CAA5B;AACAI,IAAAA,eAAe,CAACH,mBAAD,CAAf;AACL,GAHD;;AAIA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,YAAY,EAAEN;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAkB,MAAA,YAAY,EAAER;AAAhC;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEA;AAAhC;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAxBQD,gB;;KAAAA,gB;AA0BT,eAAeA,gBAAf,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import TransactionsList from \"./TransactionsList\";\n// // import Search from \"./Search\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n\n// // function AccountContainer() {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [searchTerm, setSearchTerm] = useState(\"\");\n\n// //   useEffect(() => {\n// //     fetch('http://localhost:8001/transactions')\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error('Failed to fetch transactions');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactions(data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error fetching transactions:\", error);\n// //         alert(\"Failed to fetch transactions.\");\n// //       });\n// //   }, []);\n\n \n\n// //   const filteredTransactions = transactions.filter((transaction) =>\n// //     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n// //   );\n\n// //   const addTransaction = (newTransaction) => {\n// //     setTransactions([...transactions, newTransaction]);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <Search setSearchTerm={setSearchTerm} />\n// //       <AddTransactionForm addTransaction={addTransaction} />\n// //       <TransactionsList transactions={filteredTransactions} />\n// //     </div>\n// //   );\n// // }\n\n// // export default AccountContainer;\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  const [transaction, setTransaction] = useState([])\n  const [query, setQuery] = useState(\"\")\n  useEffect(() => {\n    fetch(\"http://localhost:8001/transactions?q=\" + query)\n      .then((resp) => resp.json())\n      .then(transaction => setTransaction(transaction))\n  }, [query])\n  function handleSearch(e) {\n    setQuery(e.target.value)\n  }\n  const handleDelete = (id) => {\n        const updatedTransactions = transactions.filter((transaction) => transaction.id !== id);\n        setTransactions(updatedTransactions);\n  }\n  return (\n    <div>\n      <Search handleSearch={handleSearch} />\n      <AddTransactionForm />\n      <TransactionsList transactions={transaction} />\n      <TransactionsList transactions={transaction} />\n      \n    </div>\n  );\n}\n\nexport default AccountContainer;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function AccountContainer() {\n//   const [transactions, setTransactions] = useState([]);\n//   // const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [sortedBy, setSortedBy] = useState(null); // Track the currently sorted column\n//   const [sortedAscending, setSortedAscending] = useState(true); // Track sorting order\n\n//   useEffect(() => {\n//     fetch('http://localhost:8001/transactions')\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch transactions');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactions(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching transactions:\", error);\n//         alert(\"Failed to fetch transactions.\");\n//       });\n//   }, []);\n\n//   const filteredTransactions = transactions.filter((transaction) =>\n//     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n\n//   const addTransaction = (newTransaction) => {\n//     setTransactions([...transactions, newTransaction]);\n//   };\n\n  \n//   // Function to handle sorting\n//   const handleSort = (sortBy) => {\n//     if (sortedBy === sortBy) {\n//       setSortedAscending(!sortedAscending); // Toggle sorting order if already sorted by the selected column\n//     } else {\n//       setSortedBy(sortBy); // Set the new sorting column\n//       setSortedAscending(true); // Default to ascending order for the new column\n//     }\n//   };\n\n//   // Function to handle deletion\n//   const handleDelete = (id) => {\n//     // Remove the transaction from the array\n//     const updatedTransactions = transactions.filter((transaction) => transaction.id !== id);\n//     setTransactions(updatedTransactions);\n\n//     // Perform deletion on the backend\n//     fetch(`http://localhost:8001/transactions/${id}`, {\n//       method: 'DELETE',\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete transaction');\n//         }\n//         alert('Transaction deleted successfully.');\n//       })\n//       .catch((error) => {\n//         console.error(\"Error deleting transaction:\", error);\n//         alert(\"Failed to delete transaction.\");\n//         // Rollback changes if deletion on the backend fails\n//         setTransactions(filteredTransactions);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <Search/>\n//       <AddTransactionForm addTransaction={addTransaction} />\n//       <TransactionsList\n//         transactions={filteredTransactions}\n//         onSort={handleSort}\n//         onDelete={handleDelete}\n//         sortedBy={sortedBy}\n//         sortedAscending={sortedAscending}\n//       />\n//     </div>\n//   );\n// }\n\n// export default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}