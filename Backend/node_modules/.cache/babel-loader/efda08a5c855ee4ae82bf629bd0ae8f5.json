{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wkariuki/Development/code/phase-2/Bank-of-Flatiron /Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\n// // import React, { useState, useEffect } from \"react\";\n// // import TransactionsList from \"./TransactionsList\";\n// // import Search from \"./Search\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n// // function AccountContainer() {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [searchTerm, setSearchTerm] = useState(\"\");\n// //   useEffect(() => {\n// //     fetch('http://localhost:8001/transactions')\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error('Failed to fetch transactions');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactions(data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error fetching transactions:\", error);\n// //         alert(\"Failed to fetch transactions.\");\n// //       });\n// //   }, []);\n// //   const filteredTransactions = transactions.filter((transaction) =>\n// //     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n// //   );\n// //   const addTransaction = (newTransaction) => {\n// //     setTransactions([...transactions, newTransaction]);\n// //   };\n// //   return (\n// //     <div>\n// //       <Search setSearchTerm={setSearchTerm} />\n// //       <AddTransactionForm addTransaction={addTransaction} />\n// //       <TransactionsList transactions={filteredTransactions} />\n// //     </div>\n// //   );\n// // }\n// // export default AccountContainer;\n// import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function AccountContainer() {\n//   const [transaction, setTransaction] = useState([])\n//   const [query, setQuery] = useState(\"\")\n//   useEffect(() => {\n//     fetch(\"http://localhost:8001/transactions?q=\" + query)\n//       .then((resp) => resp.json())\n//       .then(transaction => setTransaction(transaction))\n//   }, [query])\n// function handleSearch(e) {\n//   setQuery(e.target.value)\n// }\n//   return (\n//     <div>\n//       <Search handleSearch={handleSearch} />\n//       <AddTransactionForm />\n//       <TransactionsList transactions={transaction} />\n//     </div>\n//   );\n// }\n// export default AccountContainer;\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  _s();\n\n  const [transactions, setTransactions] = useState([]); // const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const [sortedBy, setSortedBy] = useState(null); // Track the currently sorted column\n\n  const [sortedAscending, setSortedAscending] = useState(true); // Track sorting order\n\n  useEffect(() => {\n    fetch('http://localhost:8001/transactions').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch transactions');\n      }\n\n      return response.json();\n    }).then(data => {\n      setTransactions(data);\n    }).catch(error => {\n      console.error(\"Error fetching transactions:\", error);\n      alert(\"Failed to fetch transactions.\");\n    });\n  }, []);\n  const filteredTransactions = transactions.filter(transaction => transaction.description.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  const addTransaction = newTransaction => {\n    setTransactions([...transactions, newTransaction]);\n  }; // Function to handle sorting\n\n\n  const handleSort = sortBy => {\n    if (sortedBy === sortBy) {\n      setSortedAscending(!sortedAscending); // Toggle sorting order if already sorted by the selected column\n    } else {\n      setSortedBy(sortBy); // Set the new sorting column\n\n      setSortedAscending(true); // Default to ascending order for the new column\n    }\n  }; // Function to handle deletion\n\n\n  const handleDelete = id => {\n    // Remove the transaction from the array\n    const updatedTransactions = transactions.filter(transaction => transaction.id !== id);\n    setTransactions(updatedTransactions); // Perform deletion on the backend\n\n    fetch(`http://localhost:8001/transactions/${id}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to delete transaction');\n      }\n\n      alert('Transaction deleted successfully.');\n    }).catch(error => {\n      console.error(\"Error deleting transaction:\", error);\n      alert(\"Failed to delete transaction.\"); // Rollback changes if deletion on the backend fails\n\n      setTransactions(filteredTransactions);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      addTransaction: addTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: filteredTransactions,\n      onSort: handleSort,\n      onDelete: handleDelete,\n      sortedBy: sortedBy,\n      sortedAscending: sortedAscending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountContainer, \"qIaSMbXAv+4aNF9Mh51/8bb7sGQ=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/wkariuki/Development/code/phase-2/Bank-of-Flatiron /Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js"],"names":["React","useEffect","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","transactions","setTransactions","sortedBy","setSortedBy","sortedAscending","setSortedAscending","fetch","then","response","ok","Error","json","data","catch","error","console","alert","filteredTransactions","filter","transaction","description","toLowerCase","includes","searchTerm","addTransaction","newTransaction","handleSort","sortBy","handleDelete","id","updatedTransactions","method"],"mappings":"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","sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import TransactionsList from \"./TransactionsList\";\n// // import Search from \"./Search\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n\n// // function AccountContainer() {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [searchTerm, setSearchTerm] = useState(\"\");\n\n// //   useEffect(() => {\n// //     fetch('http://localhost:8001/transactions')\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error('Failed to fetch transactions');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         setTransactions(data);\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error fetching transactions:\", error);\n// //         alert(\"Failed to fetch transactions.\");\n// //       });\n// //   }, []);\n\n \n\n// //   const filteredTransactions = transactions.filter((transaction) =>\n// //     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n// //   );\n\n// //   const addTransaction = (newTransaction) => {\n// //     setTransactions([...transactions, newTransaction]);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <Search setSearchTerm={setSearchTerm} />\n// //       <AddTransactionForm addTransaction={addTransaction} />\n// //       <TransactionsList transactions={filteredTransactions} />\n// //     </div>\n// //   );\n// // }\n\n// // export default AccountContainer;\n// import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function AccountContainer() {\n//   const [transaction, setTransaction] = useState([])\n//   const [query, setQuery] = useState(\"\")\n//   useEffect(() => {\n//     fetch(\"http://localhost:8001/transactions?q=\" + query)\n//       .then((resp) => resp.json())\n//       .then(transaction => setTransaction(transaction))\n//   }, [query])\n  // function handleSearch(e) {\n  //   setQuery(e.target.value)\n  // }\n//   return (\n//     <div>\n//       <Search handleSearch={handleSearch} />\n//       <AddTransactionForm />\n//       <TransactionsList transactions={transaction} />\n//     </div>\n//   );\n// }\n\n// export default AccountContainer;\n\n\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  const [transactions, setTransactions] = useState([]);\n  // const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortedBy, setSortedBy] = useState(null); // Track the currently sorted column\n  const [sortedAscending, setSortedAscending] = useState(true); // Track sorting order\n\n  useEffect(() => {\n    fetch('http://localhost:8001/transactions')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch transactions');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setTransactions(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching transactions:\", error);\n        alert(\"Failed to fetch transactions.\");\n      });\n  }, []);\n\n  const filteredTransactions = transactions.filter((transaction) =>\n    transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const addTransaction = (newTransaction) => {\n    setTransactions([...transactions, newTransaction]);\n  };\n\n  \n  // Function to handle sorting\n  const handleSort = (sortBy) => {\n    if (sortedBy === sortBy) {\n      setSortedAscending(!sortedAscending); // Toggle sorting order if already sorted by the selected column\n    } else {\n      setSortedBy(sortBy); // Set the new sorting column\n      setSortedAscending(true); // Default to ascending order for the new column\n    }\n  };\n\n  // Function to handle deletion\n  const handleDelete = (id) => {\n    // Remove the transaction from the array\n    const updatedTransactions = transactions.filter((transaction) => transaction.id !== id);\n    setTransactions(updatedTransactions);\n\n    // Perform deletion on the backend\n    fetch(`http://localhost:8001/transactions/${id}`, {\n      method: 'DELETE',\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to delete transaction');\n        }\n        alert('Transaction deleted successfully.');\n      })\n      .catch((error) => {\n        console.error(\"Error deleting transaction:\", error);\n        alert(\"Failed to delete transaction.\");\n        // Rollback changes if deletion on the backend fails\n        setTransactions(filteredTransactions);\n      });\n  };\n\n  return (\n    <div>\n      <Search />\n      <AddTransactionForm addTransaction={addTransaction} />\n      <TransactionsList\n        transactions={filteredTransactions}\n        onSort={handleSort}\n        onDelete={handleDelete}\n        sortedBy={sortedBy}\n        sortedAscending={sortedAscending}\n      />\n    </div>\n  );\n}\n\nexport default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}