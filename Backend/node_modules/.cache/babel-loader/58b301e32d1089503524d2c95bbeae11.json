{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function AccountContainer() {\n//   const [transaction, setTransaction] = useState([])\n//   const [query, setQuery] = useState(\"\")\n//   useEffect(() => {\n//     fetch(\"http://localhost:8001/transactions?q=\" + query)\n//       .then((resp) => resp.json())\n//       .then(transaction => setTransaction(transaction))\n//   }, [query])\n//   function handleSearch(e) {\n//     setQuery(e.target.value)\n//   }\n//   return (\n//     <div>\n//       <Search handleSearch={handleSearch} />\n//       <AddTransactionForm />\n//       <TransactionsList transactions={transaction} />\n//       {/* <TransactionsList onDelete={onDelete} /> */}\n//     </div>\n//   );\n// }\n// export default AccountContainer;\n// import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function AccountContainer() {\n//   const [transactions, setTransactions] = useState([]);\n//   // const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [sortedBy, setSortedBy] = useState(null); // Track the currently sorted column\n//   const [sortedAscending, setSortedAscending] = useState(true); // Track sorting order\n//   useEffect(() => {\n//     fetch('http://localhost:8001/transactions')\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch transactions');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactions(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching transactions:\", error);\n//         alert(\"Failed to fetch transactions.\");\n//       });\n//   }, []);\n//   const filteredTransactions = transactions.filter((transaction) =>\n//     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n//   const addTransaction = (newTransaction) => {\n//     setTransactions([...transactions, newTransaction]);\n//   };\n//   // Function to handle sorting\n//   const handleSort = (sortBy) => {\n//     if (sortedBy === sortBy) {\n//       setSortedAscending(!sortedAscending); // Toggle sorting order if already sorted by the selected column\n//     } else {\n//       setSortedBy(sortBy); // Set the new sorting column\n//       setSortedAscending(true); // Default to ascending order for the new column\n//     }\n//   };\n//   // Function to handle deletion\n//   const handleDelete = (id) => {\n//     // Remove the transaction from the array\n//     const updatedTransactions = transactions.filter((transaction) => transaction.id !== id);\n//     setTransactions(updatedTransactions);\n//     // Perform deletion on the backend\n//     fetch(`http://localhost:8001/transactions/${id}`, {\n//       method: 'DELETE',\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete transaction');\n//         }\n//         alert('Transaction deleted successfully.');\n//       })\n//       .catch((error) => {\n//         console.error(\"Error deleting transaction:\", error);\n//         alert(\"Failed to delete transaction.\");\n//         // Rollback changes if deletion on the backend fails\n//         setTransactions(filteredTransactions);\n//       });\n//   };\n//   return (\n//     <div>\n//       <Search/>\n//       <AddTransactionForm addTransaction={addTransaction} />\n//       <TransactionsList\n//         transactions={filteredTransactions}\n//         onSort={handleSort}\n//         onDelete={handleDelete}\n//         sortedBy={sortedBy}\n//         sortedAscending={sortedAscending}\n//       />\n//     </div>\n//   );\n// }\n// export default AccountContainer;","map":{"version":3,"sources":["/home/wkariuki/Development/code/phase-2/Bank-of-Flatiron /Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function AccountContainer() {\n//   const [transaction, setTransaction] = useState([])\n//   const [query, setQuery] = useState(\"\")\n//   useEffect(() => {\n//     fetch(\"http://localhost:8001/transactions?q=\" + query)\n//       .then((resp) => resp.json())\n//       .then(transaction => setTransaction(transaction))\n//   }, [query])\n\n//   function handleSearch(e) {\n//     setQuery(e.target.value)\n//   }\n//   return (\n//     <div>\n//       <Search handleSearch={handleSearch} />\n//       <AddTransactionForm />\n//       <TransactionsList transactions={transaction} />\n//       {/* <TransactionsList onDelete={onDelete} /> */}\n//     </div>\n//   );\n// }\n\n// export default AccountContainer;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function AccountContainer() {\n//   const [transactions, setTransactions] = useState([]);\n//   // const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [sortedBy, setSortedBy] = useState(null); // Track the currently sorted column\n//   const [sortedAscending, setSortedAscending] = useState(true); // Track sorting order\n\n//   useEffect(() => {\n//     fetch('http://localhost:8001/transactions')\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch transactions');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTransactions(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching transactions:\", error);\n//         alert(\"Failed to fetch transactions.\");\n//       });\n//   }, []);\n\n//   const filteredTransactions = transactions.filter((transaction) =>\n//     transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n\n//   const addTransaction = (newTransaction) => {\n//     setTransactions([...transactions, newTransaction]);\n//   };\n\n  \n//   // Function to handle sorting\n//   const handleSort = (sortBy) => {\n//     if (sortedBy === sortBy) {\n//       setSortedAscending(!sortedAscending); // Toggle sorting order if already sorted by the selected column\n//     } else {\n//       setSortedBy(sortBy); // Set the new sorting column\n//       setSortedAscending(true); // Default to ascending order for the new column\n//     }\n//   };\n\n//   // Function to handle deletion\n//   const handleDelete = (id) => {\n//     // Remove the transaction from the array\n//     const updatedTransactions = transactions.filter((transaction) => transaction.id !== id);\n//     setTransactions(updatedTransactions);\n\n//     // Perform deletion on the backend\n//     fetch(`http://localhost:8001/transactions/${id}`, {\n//       method: 'DELETE',\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete transaction');\n//         }\n//         alert('Transaction deleted successfully.');\n//       })\n//       .catch((error) => {\n//         console.error(\"Error deleting transaction:\", error);\n//         alert(\"Failed to delete transaction.\");\n//         // Rollback changes if deletion on the backend fails\n//         setTransactions(filteredTransactions);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <Search/>\n//       <AddTransactionForm addTransaction={addTransaction} />\n//       <TransactionsList\n//         transactions={filteredTransactions}\n//         onSort={handleSort}\n//         onDelete={handleDelete}\n//         sortedBy={sortedBy}\n//         sortedAscending={sortedAscending}\n//       />\n//     </div>\n//   );\n// }\n\n// export default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}